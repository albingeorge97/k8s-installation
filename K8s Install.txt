Ubuntu Server - 22.04

1. sudo su
swapoff -a; sed -i '/swap/d' /etc/fstab
2. cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF
3. sudo modprobe overlay
sudo modprobe br_netfilter
4. cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF
5. sudo sysctl --system
6. apt update
7. sudo apt-get install -y apt-transport-https ca-certificates curl
8. curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg
9. echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
10. apt update
11. apt-get install -y kubelet kubeadm kubectl kubernetes-cni
12. apt install docker.io -y
13. sudo mkdir /etc/containerd
14. sudo sh -c "containerd config default > /etc/containerd/config.toml"
15. sudo sed -i 's/ SystemdCgroup = false/ SystemdCgroup = true/' /etc/containerd/config.toml
16. systemctl restart containerd.service
17. systemctl restart kubelet.service
18. systemctl enable kubelet.service

#Only on the Master Node
19. kubeadm config images pull
20. kubeadm init

#Keep the kubeadm join command in your notepad or somewhere for later.
21. mkdir -p $HOME/.kube
22. sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
23. sudo chown $(id -u):$(id -g) $HOME/.kube/config
24. kubectl get po -n kube-system
25. kubectl get --raw='/readyz?verbose'
26. kubectl cluster-info
27. kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/calico.yaml
28. kubectl get po -n kube-system

#Worker Node1
29. kubeadm join <10.0.0.15:6443 — token 6c8w3o.5r89f9cfbhiunrep — discovery-token-ca-cert-hash sha256:eec45092dc7341079fc9f2a3399ad6089ed9e86d4eec950ac541363dbc87e6aa> 
#Worker Node2
30. kubeadm join <10.0.0.15:6443 --token 6c8w3o.5r89f9cfbhiunrep --discovery-token-ca-cert-hash sha256:eec45092dc7341079fc9f2a3399ad6089ed9e86d4eec950ac541363dbc87e6aa>

#Now, from here all the commands will be run on Master Node only
31. kubectl get nodes
#Run the command, which includes the deployment file to deploy nginx on both worker Node
32. cat <<EOF | kubectl apply -f -
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  selector:
    matchLabels:
      app: nginx
  replicas: 2 
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:latest
        ports:
        - containerPort: 80      
EOF
#To expose your deployment on NodePort 32000 which means you can access your nginx application on port 32000 through your browser easily.
33. cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  selector: 
    app: nginx
  type: NodePort  
  ports:
    - port: 80
      targetPort: 80
      nodePort: 32000
EOF
#Master node
34. kubectl get pods 